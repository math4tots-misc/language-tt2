'scopeName': 'source.tt'
'fileTypes': [
  'tt'
]
'firstLineMatch': '(?i)-\\*-[^*]*(Mode:\\s*)?TT(\\s*;.*?)?\\s*-\\*-'
'name': 'TT'
'patterns': [
  {
    'include': '#comments'
  }
  {
    'match': '\\b(break|case|continue|do|else|for|goto|if|return|switch|while)\\b'
    'name': 'keyword.control\.tt'
  }
  {
    'match': '\\b(auto|final|let|class|fn|native|async|await|abstract|in|is|not)\\b'
    'name': 'storage.type\.tt'
  }
  {
    'match': '\\b(const|extern|register|restrict|static|volatile|inline)\\b'
    'name': 'storage.modifier\.tt'
  }
  {
    'match': '\\b(true|false)\\b'
    'name': 'constant.language\.tt'
  }
  {
    'match': '\\bthis\\b'
    'name': 'variable.language.this.cpp'
  }
  {
    'include': '#numbers'
  }
  {
    'include': '#strings'
  }
  {
    'comment': 'Typenames'
    'match': '(\:[0-9]+|\:[a-z][A-Za-z0-9]*|\:?\\b[A-Z][A-Za-z0-9_]*)\\b'
    'name': 'support.type.posix-reserved\.tt'
  }
  {
    'include': '#block'
  }
  {
    'include': '#c_function_call'
  }
]
'repository':
  'block':
    'patterns': [
      {
        'begin': '\\{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.block.begin\.tt'
        'end': '\\}|(?=\\s*#\\s*endif\\b)'
        'endCaptures':
          '0':
            'name': 'punctuation.section.block.end\.tt'
        'name': 'meta.block\.tt'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
    ]
  'block_innards':
    'patterns': [
      {
        'include': '#block'
      }
      {
        'include': '$base'
      }
    ]
  'c_function_call':
    'captures':
      '1':
        'name': 'punctuation.whitespace.function-call.leading\.tt'
      '2':
        'name': 'support.function.any-method\.tt'
      '4':
        'name': 'punctuation.definition.parameters\.tt'
    'match': '(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n\t\t\t(\\b \n\t\t\t\t(?!(fn|async|while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\s*\\()(?:[A-Za-z_][A-Za-z0-9_]*+\\b)++                  # actual name\n\t\t\t)\n\t\t\t \\s*(\\()'
    'name': 'meta.function-call\.tt'
  'comments':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'meta.toc-list.banner.block\.tt'
        'match': '^/\\* =(\\s*.*?)\\s*= \\*/$\\n?'
        'name': 'comment.block\.tt'
      }
      {
        'begin': '/\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin\.tt'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end\.tt'
        'name': 'comment.block\.tt'
      }
      {
        'match': '\\*/.*\\n'
        'name': 'invalid.illegal.stray-comment-end\.tt'
      }
      {
        'captures':
          '1':
            'name': 'meta.toc-list.banner.line\.tt'
        'match': '^// =(\\s*.*?)\\s*=\\s*$\\n?'
        'name': 'comment.line.banner.cpp'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.cpp'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.cpp'
            'end': '\\n'
            'name': 'comment.line.double-slash.cpp'
            'patterns': [
              {
                'include': '#line_continuation_character'
              }
            ]
          }
        ]
      }
    ]
  'line_continuation_character':
    'patterns': [
      {
        'match': '(\\\\)\\s*\\n'
        'captures':
          '1':
            'name': 'constant.character.escape.line-continuation\.tt'
      }
    ]
  'numbers':
    'patterns': [
      {
        'match': '\\b((0(x|X)[0-9a-fA-F]*)|(0(b|B)[01]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
        'name': 'constant.numeric\.tt'
      }
    ]
  'parens':
    'begin': '\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.parens.begin\.tt'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.parens.end\.tt'
    'name': 'meta.parens\.tt'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'strings':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin\.tt'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end\.tt'
        'name': 'string.quoted.double\.tt'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin\.tt'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end\.tt'
        'name': 'string.quoted.single\.tt'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
      {
        'begin': '(\'\'\')'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin\.tt'
        'end': '((?<=\'\'\')(\')\'\'|\'\'\')'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end\.tt'
        'name': 'string.quoted.single\.tt'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
        ]
      }
      {
        'begin': '(""")'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin\.tt'
        'end': '((?<=""")(")""|""")'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end\.tt'
        'name': 'string.quoted.double\.tt'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
        ]
      }
    ]
  'string_escaped_char':
    'patterns': [
      {
        'match': '\\\\(\\\\|[abefnprtv\'"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})'
        'name': 'constant.character.escape\.tt'
      }
      {
        'match': '\\\\.'
        'name': 'invalid.illegal.unknown-escape\.tt'
      }
    ]
